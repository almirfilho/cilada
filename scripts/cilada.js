// Generated by CoffeeScript 1.3.3
(function() {
  var $canvas, Ball, Hole, Mallandro, Wall, audio, b2Body, b2BodyDef, b2CircleShape, b2ContactListener, b2DebugDraw, b2Fixture, b2FixtureDef, b2PolygonShape, b2Vec2, b2World, ball, beginGame, bodyDef, config, contact, ctx, endGame, fixDef, game, holes, init, loadSounds, mallandro, update, walls, world;

  window.requestAnimFrame = (function() {
    return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function(callback, element) {
      return window.setTimeout(callback, 1000 / 60);
    };
  })();

  b2Vec2 = Box2D.Common.Math.b2Vec2;

  b2BodyDef = Box2D.Dynamics.b2BodyDef;

  b2Body = Box2D.Dynamics.b2Body;

  b2FixtureDef = Box2D.Dynamics.b2FixtureDef;

  b2Fixture = Box2D.Dynamics.b2Fixture;

  b2World = Box2D.Dynamics.b2World;

  b2PolygonShape = Box2D.Collision.Shapes.b2PolygonShape;

  b2CircleShape = Box2D.Collision.Shapes.b2CircleShape;

  b2DebugDraw = Box2D.Dynamics.b2DebugDraw;

  b2ContactListener = Box2D.Dynamics.b2ContactListener;

  config = {
    debug: false,
    width: 700,
    height: 432,
    scale: 30,
    ball: {
      iniX: 30,
      iniY: 35,
      radius: 15
    },
    walls: {
      qnt: 6,
      width: 15
    }
  };

  Ball = (function() {

    function Ball(x, y, radius) {
      this.x = x;
      this.y = y;
      this.radius = radius;
      this.position = new b2Vec2(this.x / config.scale, this.y / config.scale);
      this.impulse = new b2Vec2(0, 0);
      this.bounceBuffer = null;
      this.dieBuffer = null;
      fixDef.density = 0.5;
      fixDef.friction = 1;
      fixDef.restitution = 0;
      fixDef.shape = new b2CircleShape(this.radius / config.scale);
      bodyDef.type = b2Body.b2_dynamicBody;
      bodyDef.position.x = this.position.x;
      bodyDef.position.y = this.position.y;
      bodyDef.linearDamping = 1;
      bodyDef.userData = this;
      this.b2Obj = world.CreateBody(bodyDef);
      this.b2Obj.CreateFixture(fixDef);
    }

    Ball.prototype.resetPosition = function() {
      this.position = new b2Vec2(config.ball.iniX / config.scale, config.ball.iniY / config.scale);
      return this.b2Obj.SetPosition(this.position);
    };

    Ball.prototype.move = function() {
      this.b2Obj.ApplyImpulse(this.impulse, this.b2Obj.GetWorldCenter());
      return this.position = this.b2Obj.GetPosition();
    };

    Ball.prototype.play = function() {
      var velocity;
      if (this.bounceBuffer != null) {
        this.sound = audio.createBufferSource();
        this.sound.buffer = this.bounceBuffer;
        this.gainNode = audio.createGainNode();
        this.sound.connect(this.gainNode);
        this.gainNode.connect(audio.destination);
        velocity = this.b2Obj.GetLinearVelocity();
        this.gainNode.gain.value = (velocity.x * velocity.x + velocity.y * velocity.y) / 40;
        return this.sound.noteOn(0);
      }
    };

    Ball.prototype.playDead = function() {
      if (this.dieBuffer != null) {
        this.sound = audio.createBufferSource();
        this.sound.buffer = this.dieBuffer;
        this.sound.connect(audio.destination);
        return this.sound.noteOn(0);
      }
    };

    Ball.prototype.draw = function() {
      if (game.alive) {
        this.x = this.position.x * config.scale;
        this.y = this.position.y * config.scale;
        ctx.save();
        ctx.fillStyle = ctx.createRadialGradient(this.x, this.y - 3, 2, this.x, this.y, this.radius);
        ctx.fillStyle.addColorStop(0, '#eee');
        ctx.fillStyle.addColorStop(1, '#444');
        ctx.lineCap = 'round';
        ctx.beginPath();
        ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2, true);
        ctx.closePath();
        ctx.shadowColor = 'rgba(0,0,0,0.7)';
        ctx.shadowBlur = 8;
        ctx.shadowOffsetX = 1;
        ctx.shadowOffsetY = 6;
        ctx.fill();
        return ctx.restore();
      }
    };

    return Ball;

  })();

  Wall = (function() {

    function Wall(x, y, width, height) {
      this.x = x;
      this.y = y;
      this.width = width;
      this.height = height;
      fixDef.density = 1.0;
      fixDef.friction = 0.5;
      fixDef.restitution = 0.4;
      fixDef.shape = new b2PolygonShape;
      fixDef.shape.SetAsBox(this.width / config.scale / 2, this.height / config.scale / 2);
      bodyDef.type = b2Body.b2_staticBody;
      bodyDef.position.x = (this.x / config.scale) + this.width / config.scale / 2;
      bodyDef.position.y = (this.y / config.scale) + this.height / config.scale / 2;
      bodyDef.userData = this;
      this.b2Obj = world.CreateBody(bodyDef);
      this.b2Obj.CreateFixture(fixDef);
    }

    Wall.prototype.draw = function(shadow) {
      if (shadow == null) {
        shadow = null;
      }
      ctx.fillStyle = '#8C4600';
      ctx.save();
      if (shadow === 'block') {
        ctx.shadowColor = '#663300';
        ctx.shadowBlur = 0;
        ctx.shadowOffsetX = 0;
        ctx.shadowOffsetY = 10;
      } else if (shadow === 'shadow') {
        ctx.shadowColor = 'black';
        ctx.shadowBlur = 10;
        ctx.shadowOffsetX = 0;
        ctx.shadowOffsetY = 12;
      }
      ctx.fillRect(this.x, this.y, this.width, this.height);
      return ctx.restore();
    };

    return Wall;

  })();

  Hole = (function() {

    function Hole(x, y, radius, winHole) {
      this.x = x;
      this.y = y;
      this.radius = radius;
      this.winHole = winHole != null ? winHole : false;
      fixDef.density = 1;
      fixDef.friction = 1;
      fixDef.restitution = 0;
      fixDef.shape = new b2CircleShape(this.radius / config.scale / 4);
      bodyDef.type = b2Body.b2_staticBody;
      bodyDef.position.x = this.x / config.scale;
      bodyDef.position.y = this.y / config.scale;
      bodyDef.linearDamping = 1;
      bodyDef.userData = this;
      this.b2Obj = world.CreateBody(bodyDef);
      this.b2Obj.CreateFixture(fixDef);
    }

    Hole.prototype.draw = function() {
      ctx.save();
      if (this.winHole) {
        ctx.fillStyle = ctx.createRadialGradient(this.x + 2, this.y + 5, 12, this.x + 2, this.y + 5, this.radius + 5);
        ctx.fillStyle.addColorStop(0, '#4C6600');
        ctx.fillStyle.addColorStop(1, 'black');
      } else {
        ctx.fillStyle = ctx.createRadialGradient(this.x + 2, this.y + 5, 12, this.x + 2, this.y + 5, this.radius + 5);
        ctx.fillStyle.addColorStop(0, '#713203');
        ctx.fillStyle.addColorStop(1, 'black');
      }
      ctx.lineCap = 'round';
      ctx.beginPath();
      ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2, true);
      ctx.closePath();
      ctx.fill();
      return ctx.restore();
    };

    return Hole;

  })();

  Mallandro = (function() {

    function Mallandro() {
      this.ieieBuffer = null;
      this.raaaBuffer = null;
      this.salsiFufuBuffer = null;
      this.pegadinhaBuffer = null;
    }

    Mallandro.prototype.play = function(buffer) {
      if (buffer != null) {
        this.sound = audio.createBufferSource();
        this.sound.buffer = buffer;
        this.sound.connect(audio.destination);
        return this.sound.noteOn(0);
      }
    };

    Mallandro.prototype.ieie = function() {
      return this.play(this.ieieBuffer);
    };

    Mallandro.prototype.raaa = function() {
      return this.play(this.raaaBuffer);
    };

    Mallandro.prototype.salsiFufu = function() {
      return this.play(this.salsiFufuBuffer);
    };

    Mallandro.prototype.pegadinha = function() {
      return this.play(this.pegadinhaBuffer);
    };

    return Mallandro;

  })();

  ball = null;

  walls = [];

  holes = [];

  mallandro = null;

  game = {
    alive: false,
    win: false
  };

  $canvas = $('canvas');

  ctx = $canvas[0].getContext('2d');

  audio = null;

  world = null;

  fixDef = null;

  bodyDef = null;

  contact = null;

  $canvas.attr({
    'width': config.width,
    'height': config.height
  });

  $('#begin').click(function(e) {
    e.preventDefault();
    return beginGame();
  });

  init = function() {
    var debugDraw, h, i, orientation, r, w, x, y, _i, _ref;
    world = new b2World(new b2Vec2(0, 0), true);
    fixDef = new b2FixtureDef;
    bodyDef = new b2BodyDef;
    walls.push(new Wall(0, 0, config.width, config.walls.width));
    walls.push(new Wall(0, config.height - config.walls.width, config.width, config.walls.width));
    walls.push(new Wall(0, 0, config.walls.width, config.height));
    walls.push(new Wall(config.width - config.walls.width, 0, config.width, config.height));
    w = config.walls.width;
    h = config.height * 0.8;
    for (i = _i = 1, _ref = config.walls.qnt; 1 <= _ref ? _i <= _ref : _i >= _ref; i = 1 <= _ref ? ++_i : --_i) {
      x = i * ((config.width - config.walls.width) / (config.walls.qnt + 1));
      y = i % 2 === 0 ? config.height * 0.2 : 0;
      walls.push(new Wall(x, y, w, h));
    }
    r = config.ball.radius;
    holes.push(new Hole(80, 150, r));
    holes.push(new Hole(35, 300, r));
    holes.push(new Hole(170, 390, r));
    holes.push(new Hole(135, 240, r));
    holes.push(new Hole(175, 70, r));
    holes.push(new Hole(270, 150, r));
    holes.push(new Hole(301, 375, r));
    holes.push(new Hole(371, 250, r));
    holes.push(new Hole(330, 46, r));
    holes.push(new Hole(468, 110, r));
    holes.push(new Hole(440, 370, r));
    holes.push(new Hole(540, 320, r));
    holes.push(new Hole(620, 180, r));
    holes.push(new Hole(667, 130, r));
    holes.push(new Hole(643, 390, r, true));
    ball = new Ball(config.ball.iniX, config.ball.iniY, config.ball.radius);
    mallandro = new Mallandro;
    if (window.webkitAudioContext != null) {
      audio = new webkitAudioContext();
      loadSounds();
    }
    orientation = false;
    if (window.DeviceOrientationEvent != null) {
      window.addEventListener('deviceorientation', function(orientData) {
        ball.impulse.x = orientData.gamma / config.scale / 2;
        ball.impulse.y = orientData.beta / config.scale / 2;
        return orientation = true;
      });
    }
    if ((window.DeviceMotionEvent != null) && !orientation) {
      window.addEventListener('devicemotion', function(event) {
        ball.impulse.x = event.accelerationIncludingGravity.x / config.scale * (-3);
        ball.impulse.y = event.accelerationIncludingGravity.y / config.scale * 3;
        return orientation = true;
      });
    }
    contact = new b2ContactListener;
    contact.BeginContact = function(contact) {
      if (contact.GetFixtureA().GetBody().GetUserData() instanceof Wall) {
        return ball.play();
      } else {
        ball.playDead();
        game.alive = false;
        if (contact.GetFixtureB().GetBody().GetUserData().winHole) {
          return game.win = true;
        }
      }
    };
    world.SetContactListener(contact);
    if (config.debug) {
      debugDraw = new b2DebugDraw();
      debugDraw.SetSprite(ctx);
      debugDraw.SetDrawScale(config.scale);
      debugDraw.SetFillAlpha(0.3);
      debugDraw.SetLineThickness(1.0);
      debugDraw.SetFlags(b2DebugDraw.e_shapeBit | b2DebugDraw.e_jointBit);
      return world.SetDebugDraw(debugDraw);
    }
  };

  update = function() {
    var wall, _i, _len;
    if (game.alive) {
      world.Step(1 / 60, 10, 10);
      ball.move();
      if (config.debug) {
        world.DrawDebugData();
      } else {
        ctx.clearRect(0, 0, config.width, config.height);
        ball.draw();
        for (_i = 0, _len = walls.length; _i < _len; _i++) {
          wall = walls[_i];
          wall.draw();
        }
      }
      world.ClearForces();
      return requestAnimFrame(update);
    } else {
      return endGame();
    }
  };

  beginGame = function() {
    if (!game.alive) {
      return $('#prompt').animate({
        top: '-60%'
      }, 450, 'swing', function() {
        $('#malandro').animate({
          top: '5%'
        }, 400);
        return $('#overlay').fadeOut(600, function() {
          $('#balloon .body').html('Ié Ié!!');
          $('#balloon').show();
          mallandro.ieie();
          return setTimeout(function() {
            $('#balloon').hide();
            return $('#malandro').animate({
              top: '100%'
            }, 400, 'swing', function() {
              game.alive = true;
              game.win = false;
              ball.resetPosition();
              return requestAnimFrame(update);
            });
          }, 800);
        });
      });
    }
  };

  endGame = function() {
    var msg, time, _ref;
    _ref = game.win ? ['Glu glu ié ié!', 800] : ['Ráááá!', 2200], msg = _ref[0], time = _ref[1];
    return setTimeout(function() {
      $('#malandro').animate({
        top: '5%'
      }, 300);
      $('#balloon .body').html(msg);
      $('#balloon').fadeIn('slow');
      if (game.win) {
        mallandro.ieie();
      } else {
        mallandro.pegadinha();
      }
      return setTimeout(function() {
        return $('#overlay').fadeIn(600, function() {
          $('#balloon').hide();
          return $('#malandro').animate({
            top: '45%'
          }, 400, 'swing', function() {
            return $('#prompt').animate({
              top: '25%'
            }, 450);
          });
        });
      }, time);
    }, 600);
  };

  loadSounds = function() {
    var requestBounce, requestDie, requestIeie, requestPegadinha;
    requestBounce = new XMLHttpRequest();
    requestBounce.open('GET', 'sounds/bounce.wav', true);
    requestBounce.responseType = 'arraybuffer';
    requestBounce.onload = function() {
      return audio.decodeAudioData(requestBounce.response, function(buffer) {
        return ball.bounceBuffer = buffer;
      }, function() {
        return alert('erro ao ler audio bounce.wav');
      });
    };
    requestBounce.send();
    requestDie = new XMLHttpRequest();
    requestDie.open('GET', 'sounds/die.mp3', true);
    requestDie.responseType = 'arraybuffer';
    requestDie.onload = function() {
      return audio.decodeAudioData(requestDie.response, function(buffer) {
        return ball.dieBuffer = buffer;
      }, function() {
        return alert('erro ao ler audio die.mp3');
      });
    };
    requestDie.send();
    requestIeie = new XMLHttpRequest();
    requestIeie.open('GET', 'sounds/ieie.mp3', true);
    requestIeie.responseType = 'arraybuffer';
    requestIeie.onload = function() {
      return audio.decodeAudioData(requestIeie.response, function(buffer) {
        return mallandro.ieieBuffer = buffer;
      }, function() {
        return alert('erro ao ler audio ieie.mp3');
      });
    };
    requestIeie.send();
    requestPegadinha = new XMLHttpRequest();
    requestPegadinha.open('GET', 'sounds/pegadinha.mp3', true);
    requestPegadinha.responseType = 'arraybuffer';
    requestPegadinha.onload = function() {
      return audio.decodeAudioData(requestPegadinha.response, function(buffer) {
        return mallandro.pegadinhaBuffer = buffer;
      }, function() {
        return alert('erro ao ler audio ieie.mp3');
      });
    };
    return requestPegadinha.send();
  };

  init();

}).call(this);
