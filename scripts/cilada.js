// Generated by CoffeeScript 1.3.3
(function() {
  var $canvas, b2Body, b2BodyDef, b2CircleShape, b2DebugDraw, b2Fixture, b2FixtureDef, b2PolygonShape, b2Vec2, b2World, ball, config, ctx, init, orientation, update, world;

  window.requestAnimFrame = (function() {
    return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function(callback, element) {
      return window.setTimeout(callback, 1000 / 60);
    };
  })();

  b2Vec2 = Box2D.Common.Math.b2Vec2;

  b2BodyDef = Box2D.Dynamics.b2BodyDef;

  b2Body = Box2D.Dynamics.b2Body;

  b2FixtureDef = Box2D.Dynamics.b2FixtureDef;

  b2Fixture = Box2D.Dynamics.b2Fixture;

  b2World = Box2D.Dynamics.b2World;

  b2PolygonShape = Box2D.Collision.Shapes.b2PolygonShape;

  b2CircleShape = Box2D.Collision.Shapes.b2CircleShape;

  b2DebugDraw = Box2D.Dynamics.b2DebugDraw;

  config = {
    width: 700,
    height: 432,
    scale: 30,
    walls: 7,
    wallWidth: 0.5
  };

  ball = {
    iniX: 1,
    iniY: 1,
    radius: 0.5,
    newPosition: null,
    obj: null
  };

  $canvas = $('canvas');

  ctx = $canvas[0].getContext('2d');

  world = null;

  $canvas.attr({
    'width': config.width,
    'height': config.height
  });

  $canvas.css({
    'top': "-webkit-calc(50% - " + (config.height / 2) + "px)",
    'left': "-webkit-calc(50% - " + (config.width / 2) + "px)"
  });

  init = function() {
    var bodyDef, debugDraw, fixDef, i, _i, _ref;
    world = new b2World(new b2Vec2(0, 0), true);
    ball.newPosition = new b2Vec2(ball.iniX, ball.iniY);
    fixDef = new b2FixtureDef;
    fixDef.density = 1.0;
    fixDef.friction = 0.5;
    fixDef.restitution = 0.4;
    fixDef.shape = new b2PolygonShape;
    fixDef.shape.SetAsBox(canvas.width / config.scale / 2, config.wallWidth / 2);
    bodyDef = new b2BodyDef;
    bodyDef.type = b2Body.b2_staticBody;
    bodyDef.position.x = canvas.width / config.scale / 2;
    bodyDef.position.y = (canvas.height / config.scale) - config.wallWidth / 2;
    world.CreateBody(bodyDef).CreateFixture(fixDef);
    bodyDef.position.x = canvas.width / config.scale / 2;
    bodyDef.position.y = config.wallWidth / 2;
    world.CreateBody(bodyDef).CreateFixture(fixDef);
    fixDef.shape.SetAsBox(config.wallWidth / 2, canvas.height / config.scale / 2);
    bodyDef.position.x = config.wallWidth / 2;
    bodyDef.position.y = canvas.height / config.scale / 2;
    world.CreateBody(bodyDef).CreateFixture(fixDef);
    bodyDef.position.x = canvas.width / config.scale - config.wallWidth / 2;
    bodyDef.position.y = canvas.height / config.scale / 2;
    world.CreateBody(bodyDef).CreateFixture(fixDef);
    for (i = _i = 1, _ref = config.walls; 1 <= _ref ? _i < _ref : _i > _ref; i = 1 <= _ref ? ++_i : --_i) {
      bodyDef.position.x = (canvas.width / config.scale - config.wallWidth) / config.walls * i + config.wallWidth / 2;
      bodyDef.position.y = canvas.height / config.scale / 2;
      if (i % 2 === 0) {
        bodyDef.position.y += 3;
      } else {
        bodyDef.position.y -= 3;
      }
      world.CreateBody(bodyDef).CreateFixture(fixDef);
    }
    fixDef.density = 0.5;
    fixDef.friction = 1;
    fixDef.restitution = 0;
    fixDef.shape = new b2CircleShape(ball.radius);
    bodyDef.type = b2Body.b2_dynamicBody;
    bodyDef.position.x = ball.iniX;
    bodyDef.position.y = ball.iniY;
    bodyDef.linearDamping = 1;
    bodyDef.userData = {
      name: 'bola!'
    };
    ball.obj = world.CreateBody(bodyDef);
    ball.obj.CreateFixture(fixDef);
    debugDraw = new b2DebugDraw();
    debugDraw.SetSprite(ctx);
    debugDraw.SetDrawScale(config.scale);
    debugDraw.SetFillAlpha(0.3);
    debugDraw.SetLineThickness(1.0);
    debugDraw.SetFlags(b2DebugDraw.e_shapeBit | b2DebugDraw.e_jointBit);
    return world.SetDebugDraw(debugDraw);
  };

  update = function() {
    world.Step(1 / 60, 10, 10);
    ball.obj.ApplyImpulse(ball.newPosition, ball.obj.GetWorldCenter());
    world.DrawDebugData();
    world.ClearForces();
    return requestAnimFrame(update);
  };

  init();

  requestAnimFrame(update);

  orientation = false;

  if (window.DeviceOrientationEvent) {
    window.addEventListener('deviceorientation', function(orientData) {
      ball.newPosition.x = orientData.gamma / config.scale / 2;
      ball.newPosition.y = orientData.beta / config.scale / 2;
      return orientation = true;
    });
  }

  if (window.DeviceMotionEvent && !orientation) {
    window.addEventListener('devicemotion', function(event) {
      ball.newPosition.x = event.accelerationIncludingGravity.x / config.scale * (-3);
      ball.newPosition.y = event.accelerationIncludingGravity.y / config.scale * 3;
      return orientation = true;
    });
  }

}).call(this);
